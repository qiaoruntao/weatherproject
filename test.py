from query_file_index import query_func

#
# rows = query_data(
#     start_iso="2025-11-05T00:00:00",
#     end_iso="2025-11-05T01:00:00",
#     lon_min_0_360=80, lon_max_0_360=81,
#     lat_min=80, lat_max=81,
#     vars_any=["t2m", "prate"],  # optional
#     products=["flxf", "ocnf"],  # optional
# )

# rows = query_func("2025-11-05T00:00:00","2025-11-06T01:00:00", "heightAboveGround", "t2m", (80, 80, 81, 81))

# rows = query_func("2025-11-05T00:00:00", "2025-11-06T01:00:00", "heightAboveGround", "t2m", (80, 80, 85, 85))

# 地面2米温度
# rows = query_func("2025-11-05T00:00:00Z", "2025-11-05T01:00:00Z", "heightAboveGround", "t2m", (80, 80, 85, 85))
# print(rows)
# 积雪覆盖
# rows = query_func("2025-11-05T00:00:00Z", "2025-11-05T01:00:00Z", "surface", "snowc", (80, 80, 85, 85))
# print(rows)
# 风速
# rows = query_func("2025-11-05T00:00:00Z", "2025-11-06T01:00:00Z", "hybrid", "u", (80, 80, 85, 85))
# rows = query_func("2025-11-05T00:00:00Z", "2025-11-06T01:00:00Z", "heightAboveGround", "u10", (80, 80, 85, 85))
# rows = query_func("2025-11-05T00:00:00Z", "2025-11-06T01:00:00Z", 'atmosphereSingleLayer', 'tcc', (80, 80, 85, 85))
# print(rows)
# rows = query_func("2025-11-05T00:00:00Z", "2025-11-06T01:00:00Z", "hybrid", "v", (80, 80, 85, 85))
# print(rows)

data = [
    [
        "pwat",
        "atmosphereSingleLayer"
    ],
    [
        "tcc",
        "atmosphereSingleLayer"
    ],
    [
        "cwork",
        "atmosphereSingleLayer"
    ],
    [
        "tcc",
        "boundaryLayerCloudLayer"
    ],
    [
        "tcc",
        "convectiveCloudLayer"
    ],
    [
        "t",
        "depthBelowLandLayer"
    ],
    [
        "soilw",
        "depthBelowLandLayer"
    ],
    [
        "soill",
        "depthBelowLandLayer"
    ],
    [
        "ssw",
        "depthBelowLandLayer"
    ],
    [
        "u10",
        "heightAboveGround"
    ],
    [
        "v10",
        "heightAboveGround"
    ],
    [
        "t2m",
        "heightAboveGround"
    ],
    [
        "tmax",
        "heightAboveGround"
    ],
    [
        "tmin",
        "heightAboveGround"
    ],
    [
        "sh2",
        "heightAboveGround"
    ],
    [
        "qmax",
        "heightAboveGround"
    ],
    [
        "qmin",
        "heightAboveGround"
    ],
    [
        "pres",
        "highCloudBottom"
    ],
    [
        "tcc",
        "highCloudLayer"
    ],
    [
        "pres",
        "highCloudTop"
    ],
    [
        "t",
        "highCloudTop"
    ],
    [
        "t",
        "hybrid"
    ],
    [
        "u",
        "hybrid"
    ],
    [
        "v",
        "hybrid"
    ],
    [
        "q",
        "hybrid"
    ],
    [
        "gh",
        "hybrid"
    ],
    [
        "pres",
        "lowCloudBottom"
    ],
    [
        "tcc",
        "lowCloudLayer"
    ],
    [
        "pres",
        "lowCloudTop"
    ],
    [
        "t",
        "lowCloudTop"
    ],
    [
        "pres",
        "middleCloudBottom"
    ],
    [
        "tcc",
        "middleCloudLayer"
    ],
    [
        "pres",
        "middleCloudTop"
    ],
    [
        "t",
        "middleCloudTop"
    ],
    [
        "sdswrf",
        "nominalTop"
    ],
    [
        "suswrf",
        "nominalTop"
    ],
    [
        "sulwrf",
        "nominalTop"
    ],
    [
        "csusf",
        "nominalTop"
    ],
    [
        "csulf",
        "nominalTop"
    ],
    [
        "unknown",
        "surface"
    ],
    [
        "siconc",
        "surface"
    ],
    [
        "slt",
        "surface"
    ],
    [
        "t",
        "surface"
    ],
    [
        "sp",
        "surface"
    ],
    [
        "lsm",
        "surface"
    ],
    [
        "ishf",
        "surface"
    ],
    [
        "fsr",
        "surface"
    ],
    [
        "prate",
        "surface"
    ],
    [
        "sde",
        "surface"
    ],
    [
        "utaua",
        "surface"
    ],
    [
        "vtaua",
        "surface"
    ],
    [
        "orog",
        "surface"
    ],
    [
        "slhtf",
        "surface"
    ],
    [
        "snohf",
        "surface"
    ],
    [
        "srweq",
        "surface"
    ],
    [
        "crain",
        "surface"
    ],
    [
        "cpr",
        "surface"
    ],
    [
        "snowc",
        "surface"
    ],
    [
        "sdwe",
        "surface"
    ],
    [
        "fricv",
        "surface"
    ],
    [
        "iegwss",
        "surface"
    ],
    [
        "ingwss",
        "surface"
    ],
    [
        "sdswrf",
        "surface"
    ],
    [
        "suswrf",
        "surface"
    ],
    [
        "sdlwrf",
        "surface"
    ],
    [
        "sulwrf",
        "surface"
    ],
    [
        "ssrun",
        "surface"
    ],
    [
        "veg",
        "surface"
    ],
    [
        "watr",
        "surface"
    ],
    [
        "gflux",
        "surface"
    ],
    [
        "sfexc",
        "surface"
    ],
    [
        "cnwat",
        "surface"
    ],
    [
        "sbsno",
        "surface"
    ],
    [
        "duvb",
        "surface"
    ],
    [
        "cduvb",
        "surface"
    ],
    [
        "csdsf",
        "surface"
    ],
    [
        "csusf",
        "surface"
    ],
    [
        "vbdsf",
        "surface"
    ],
    [
        "vddsf",
        "surface"
    ],
    [
        "nbdsf",
        "surface"
    ],
    [
        "nddsf",
        "surface"
    ],
    [
        "csulf",
        "surface"
    ],
    [
        "csdlf",
        "surface"
    ],
    [
        "vgtyp",
        "surface"
    ],
    [
        "acond",
        "surface"
    ],
    [
        "evcw",
        "surface"
    ],
    [
        "trans",
        "surface"
    ],
    [
        "sltyp",
        "surface"
    ],
    [
        "evbs",
        "surface"
    ],
    [
        "al",
        "surface"
    ],
    [
        "sithick",
        "surface"
    ]
]
available = []
for datum in data:
    result = query_func("2025-11-05T00:00:00", "2025-11-05T01:00:00", datum[1], datum[0], (80, 80, 85, 85))
    if len(result) > 0:
        available.append(datum)
print(available)
